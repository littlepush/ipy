#! /bin/bash

_font_bold=`tput bold`
_font_normal=`tput sgr0`
_font_red=`tput setaf 1`
_font_green=`tput setaf 2`
_font_yellow=`tput setaf 3`
_font_default=`tput setaf 7`
_font_begin_underline=`tput smul`
_font_end_underline=`tput rmul`

XS=xcode-select
XPath=$($XS -print-path)

# make sure the XCode is at least version 5.0
# Try to detect current Xcode version and path installed.
function InitXbuild() {
    AppXPath="/Applications/Xcode.app/Contents/Developer"
    if [ "$XPath" != $AppXPath ]; then
        $XS -switch /Applications/Xcode.app
    fi
}

# Try to find out the highest SDK version has been installed.
function InitConfig() {
    # Find XCode SDK Version.
    XCodeSDKsPath=($(xcodebuild -version -sdk 2>/dev/null | grep -E "^Path:" | grep -v MacOSX | awk -F": " '{print $2}' | tr '\n' ' '))
    for p in ${XCodeSDKsPath[@]}; do echo $p | grep -o -E "[0-9]\.[0-9]"; done | sort | tail -n 1
}

function CompileVersion() {
    value=$(date | md5)
    echo ${value:0:7}
}

XCodeSDKs=($(xcodebuild -version -sdk 2>/dev/null | grep -E "^Path:" | grep -v MacOSX | awk '{print $2}' | tr '\n' ' '))
XCodePlatforms=($( xcodebuild -version -sdk | grep -E "^PlatformPath" | grep -v MacOSX | awk '{print $2}' | uniq | tr '\n' ' '))
ROOT_PATH=$(pwd)

XCodeVersion=$(xcodebuild -version | grep Xcode | cut -d ' ' -f 2)

# Compare two version
# if V1 < V2, return -1
# if V1 > V2, return 1
# if V1 = V2, return 0
function VersionCompare() {
    v1=($(echo $1 | tr '.' ' '))
    v2=($(echo $2 | tr '.' ' '))
    lv1=${#v1[@]}
    lv2=${#v2[@]}
    cmprLength=0
    if [ $lv1 -gt $lv2 ]; then
        cmprLength=$lv2
        longerVersion="1"
    elif [ $lv1 -lt $lv2 ]; then
        cmprLength=$lv1
        longerVersion="-1"
    else
        cmprLength=$lv1
        longerVersion="0"
    fi
    for ((i=0;i<$cmprLength;++i)); do
        p1=${v1[$i]}
        p2=${v2[$i]}
        if [ $p1 -gt $p2 ]; then
            echo "1"
            return
        elif [ $p1 -lt $p2 ]; then
            echo "-1"
            return
        else
            continue
        fi
    done
    echo $longerVersion
}

# Say the message and echo to the screen.
function msg() {
    if [ ! "$1" ]; then
        return 1
    fi
    say $1 &
    echo $1
}

function FindFirstTarget() {
    __target=$(xcodebuild -list | grep "Targets" -A 1 | tail -n 1 | tr -d ' ')
    if [ $? -ne 0 ]; then
        echo "Not in an Xcode project folder."
        exit 1
    fi
    echo ${__target}
}

vResult=$(VersionCompare $XCodeVersion "5.0")
# Define the available Archs
if [ "$vResult" == "-1" ]; then
    Archs=("i386" "armv7" "armv7s")
else
    Archs=("i386" "x86_64" "armv7" "armv7s" "arm64")
fi
countOfSupportedArchs=${#Archs[@]}

Version=$(InitConfig)
XCodeSDKNames=($(xcodebuild -showsdks | grep iOS | grep "sdk" | grep $Version | awk -F"-sdk " '{print $2}'))

# Function: SearchSDK for specified platform
function SearchSDK() {
    platform=$1
    for sdk in ${XCodeSDKs[@]}; do
        echo $sdk | grep $Version | grep $platform
    done | sort | uniq | head -n 1
}

# Function: Search SDK Name for specified platform
function SearchSDKName() {
    platform=$1
    for sdk in ${XCodeSDKNames[@]}; do
        echo $sdk | grep $platform 
    done | sort | uniq | head -n 1
}

# Function: Search specified platform path
function SearchPlatform() {
    platform=$1
    for pf in ${XCodePlatforms[@]}; do
        echo $pf | grep $platform
    done | sort | uniq | head -n 1
}

# Capitalize the string
function capitalize() {
    __string=$1
    if [ ! $2 ]; then 
        __cCount=1
    else
        __cCount=$2
    fi

    __cString=$(echo ${__string:0:${__cCount}} | tr a-z A-Z)
    echo ${__cString}${__string:${__cCount}}
}

# Install Frameworks to Xcode Path
function InstallFrameworkToXcode() {
    ProjectName=$1
    FrameworkVersion=$2
    if [ ! -d /usr/local/Frameworks/${ProjectName}.${FrameworkVersion}.framework ]; then
        return 1
    fi
    for sdkPath in ${XCodeSDKs[@]}; do
        sdkFrameworkPath=${sdkPath}/System/Library/Frameworks/${ProjectName}.framework
        sudo rm -rf ${sdkFrameworkPath}
        sudo mkdir -p ${sdkFrameworkPath}
        sudo ln -s /usr/local/Frameworks/${ProjectName}.${FrameworkVersion}.framework/${ProjectName} ${sdkFrameworkPath}/${ProjectName}
        sudo ln -s /usr/local/Frameworks/${ProjectName}.${FrameworkVersion}.framework/Headers ${sdkFrameworkPath}/Headers
    done
}

# Install Frameworks
function InstallFrameworkToDefault() {
    ProjectName=$1
    FrameworkVersion=$2
    mkdir -p /usr/local/Frameworks
    rm -rf /usr/local/Frameworks/${ProjectName}.${FrameworkVersion}.framework
    mv -f ./${ProjectName}.framework /usr/local/Frameworks/${ProjectName}.${FrameworkVersion}.framework

    InstallFrameworkToXcode $ProjectName $FrameworkVersion
}

ARM7SDK=$(SearchSDK iPhoneOS)
ARM7Platform=$(SearchPlatform iPhoneOS)
ARM7CC=${XPath}/usr/bin/
ARM7SDKName=$(SearchSDKName iphoneos)

ARM7sSDK=$(SearchSDK iPhoneOS)
ARM7sPlatform=$(SearchPlatform iPhoneOS)
ARM7sCC=${XPath}/usr/bin/
ARM7sSDKName=$(SearchSDKName iphoneos)

ARM64SDK=$(SearchSDK iPhoneOS)
ARM64Platform=$(SearchPlatform iPhoneOS)
ARM64CC=${XPath}/usr/bin/
ARM64SDKName=$(SearchSDKName iphoneos)

i386SDK=$(SearchSDK iPhoneSimulator)
i386Platform=$(SearchPlatform iPhoneSimulator)
i386CC=${i386Platform}/Developer/usr/bin/
i386SDKName=$(SearchSDKName iphonesimulator)

x86_64SDK=$(SearchSDK iPhoneSimulator)
x86_64Platform=$(SearchPlatform iPhoneSimulator)
x86_64CC=${x86_64Platform}/Developer/usr/bin/
x86_64SDKName=$(SearchSDKName iphonesimulator)

# Generate the settings array
SDKs=(${i386SDK} ${x86_64SDK} ${ARM7SDK} ${ARM7SDK} ${ARM64SDK})
Platforms=(${i386Platform} ${x86_64Platform} ${ARM7Platform} ${ARM7sPlatform} ${ARM64Platform})
CCs=(${i386CC} ${x86_64CC} ${ARM7CC} ${ARM7sCC} ${ARM64CC})
SDKNames=(${i386SDKName} ${x86_64SDKName} ${ARM7SDKName} ${ARM7sSDKName} ${ARM64SDKName})
IPHONE_VER_MINs=("-miphoneos-version-min=5.0" "-miphoneos-version-min=5.1.1" "-miphoneos-version-min=5.0" "-miphoneos-version-min=5.0" "-miphoneos-version-min=7.0")
XIOS_VER_MINs=("5.0" "5.1.1" "5.0" "5.0" "7.0")

function __usage() {
    cat "install.usage.txt"
}

function __get_dirs() {
    _all_items=$(ls)
    for _item in ${_all_items}; do 
        if [ "${_item:0:1}" == "." ]; then
            continue
        fi
        if [ -d ${_item} ]; then 
            printf "%s " $(printf "%s" ${_item} | tr -d '/')
        fi
    done
}

# Initialize the variables
__supported_actions=(compile switch list install)
__items=($(__get_dirs))
__configuration=release
__action=(compile install)
__version=$(CompileVersion)

for arg in $@; do
    key=$(echo $arg | cut -d = -f 1 | tr '[:upper:]' '[:lower:]')
    if [ $? -ne 0 ]; then
        echo "Wrong Command."
        __usage
        exit 1
    fi
    value=$(echo $arg | cut -d = -f 2)
    case $key in
    "--config"|"--configuration")
        __configuration=$(echo $value | tr '[:upper:]' '[:lower:]')
        if [ "${__configuration}" != "release" ]; then
            if [ "${__configuration}" != "debug" ]; then
                echo "Unknow configuration " $value
                exit 2
            fi
        fi
        ;;
    "--version")
        __version=$value
        ;;
    "--switch")
        __action=(switch)
        __switch_version=$value
        ;;
    "--list")
        __action=(list)
        ;;
    "--item")
        __items=($value)
        ;;
    "--help")
        __usage
        exit 0
        ;;
    *)
        echo "Unknow command $key."
        __usage
        exit 1
        ;;
    esac
done

if [ "${__configuration}" == "release" ]; then
    __configuration=Release
fi
if [ "${__configuration}" == "debug" ]; then
    __configuration=Debug
fi

function cleanXcodeModuleCache() {
    mcf=$(sudo find /var/folders -name com.apple.DeveloperTools)
    for f in $mcf; do 
        sudo rm -rfv $f
    done
}

function __action_compile() {
    _a_item=$1
    _a_version=$2
    _a_config=$3

    cd ${_a_item}

    _project_name=$(FindFirstTarget)
    PCH_DIR=/tmp/SharedPrecompiledHeaders
    cleanXcodeModuleCache > /dev/null 2>&1

    tput sc
    echo -n ${_font_bold}"Building "${_font_green}${_a_item}${_font_normal}"( ${Archs[@]} )"
    for ((i=0;i<$countOfSupportedArchs;++i)); do
        rm -rf ${PCH_DIR}
        arch=${Archs[$i]}
        tput rc
        tput ed
        echo -n "${_font_bold}Building ${_font_green}${_a_item}${_font_normal}( "
        _has_not_compiled=0
        for _arch in ${Archs[@]}; do
            if [ "${_arch}" == "${arch}" ]; then
                _has_not_compiled=1
                echo -n "${_font_yellow}${_arch}${_font_default} "
            else
                if [ $_has_not_compiled -eq 1 ]; then
                    echo -n "${_arch} "
                else
                    echo -n "${_font_green}${_arch}${_font_default} "
                fi
            fi
        done
        echo -n ")${_font_normal}"
        xcodebuild  -target ${_project_name}                                \
                    -configuration ${_a_config}                             \
                    -sdk ${SDKNames[$i]}                                    \
                    TARGET_NAME=${_project_name}-${arch}                    \
                    CONFIGURATION_BUILD_DIR=./build/${_project_name}-lib    \
                    CACHE_ROOT=/tmp/                                        \
                    SHARED_PRECOMPS_DIR=${PCH_DIR}/${_project_name}         \
                    ARCHS=${arch}                                           \
                    VALID_ARCHS=${arch}                                     \
                    IPHONEOS_DEPLOYMENT_TARGET=${XIOS_VER_MINs[$i]} >> ${_a_item}.build.log 2>> ${_a_item}.build.log
        if [ $? -ne 0 ]; then
            echo ""
            echo ${_font_bold}${_font_red}"Failed to build ${_project_name}"${_font_normal}
            exit 1
        fi
    done

    cd ./build/${_project_name}-lib

    lipoArg=$( for arch in ${Archs[@]}; do echo "-arch $arch lib${_project_name}-${arch}.a"; done | tr '\n' ' ')
    xcrun -sdk iphoneos lipo -output lib${_project_name}.a -create $lipoArg

    if [ ! -d ./usr ]; then
        echo "Must set the copy headers in the Project setting and put the copy header files in the public section."
        exit 1
    fi

    mv -f ./usr/local/include ./include
    includeFiles=$(ls include)
    for headfile in $includeFiles; do
        filePath=include/${headfile}
        #echo "process file: $filePath"
        includes=$(grep "#import \"" ${filePath} | awk -F"#import \"" '{print $2}' | awk -F "\"" '{print $1}')
        #echo "Find import head: $includes" >> /tmp/aggtarget.log
        for includePiece in $includes; do
            filename=$(echo $includePiece | awk -F"." '{print $1}')
            extension=$(echo $includePiece | awk -F"." '{print $2}')
            #echo "file: $filename, extension: $extension"
            sed -i "" "s/\#import\ \"${filename}\.${extension}\"/\#import\ \<${_project_name}\/${filename}\.${extension}\>/g" $filePath
        done
    done

    cd ../../
    rm -rf ${_project_name}.framework
    mkdir ${_project_name}.framework
    mv ./build/${_project_name}-lib/lib${_project_name}.a ./${_project_name}.framework/${_project_name}
    mv -f ./build/${_project_name}-lib/include ./${_project_name}.framework/Headers

    tput rc
    tput ed
    echo ${_font_bold}"Building "${_font_green}${_a_item}${_font_normal}"( ${_font_green}${Archs[@]}${_font_normal} )"

    cd ../ >/dev/null 2>&1
}

function __action_install() {
    _a_item=$1
    _a_version=$2
    _a_config=$3

    cd ${_a_item}

    _project_name=$(FindFirstTarget)

    InstallFrameworkToDefault ${_a_item} "${_a_config}.${__version}"
    rm -rf  ./build

    cd ../ >/dev/null 2>&1
}

function __action_list() {
    _a_item=$1
    _a_version=$2
    _a_config=$3

    __sdk_path=${XCodeSDKs[0]}/System/Library/Frameworks/${_a_item}.framework
    __using_item=$(ls -lha ${__sdk_path} | grep -v "Header" | awk -F"->" '{print $2}' | awk -F"/" '{print $5}')
    echo -n "${_font_bold}Current Using Version:"
    echo ${_font_red}${__using_item}${_font_normal}
    echo "${_font_bold}All Installed Version of ${_font_green}${_a_item}${_font_default}${_font_normal}:"
    _installed_items=$(ls /usr/local/Frameworks | grep "$_a_item")

    _current_specified_item=${_a_item}.${_a_config}.${_a_version}.framework
    for _i_item in ${_installed_items}; do
        if [ "${_i_item}" == "${_current_specified_item}" ]; then
            echo "    "${_font_begin_underline}${_i_item}${_font_end_underline}" *"
        else
            echo "    "${_i_item}
        fi
    done
    echo ""
}

function __action_switch() {
    _a_item=$1
    _a_version=$2
    _a_config=$3

    _current_specified_item=${_a_item}.${_a_config}.${_a_version}.framework
    _is_item_been_installed=$(ls /usr/local/Frameworks | grep "${_current_specified_item}")
    if [ "${_is_item_been_installed}" == "" ]; then
        echo "${_font_red}The item ${_current_specified_item} has not been installed ${_font_normal}"
        exit 2
    fi

    InstallFrameworkToXcode ${_a_item} "${_a_config}.${_a_version}"
    __action_list ${_a_item} ${_a_version} ${_a_config}
}

for _framework_item in ${__items[@]}; do 
    for _framework_action in ${__action[@]}; do 
        _action_method_name="__action_"${_framework_action}
        ${_action_method_name} ${_framework_item} ${__version} ${__configuration}
    done
done
