#! /bin/sh

XS=xcode-select
XPath=$($XS -print-path)

# make sure the XCode is at least version 5.0
# Try to detect current Xcode version and path installed.
function InitXbuild() {
    AppXPath="/Applications/Xcode.app/Contents/Developer"
    if [ "$XPath" != $AppXPath ]; then
        $XS -switch /Applications/Xcode.app
    fi
}

# Try to find out the highest SDK version has been installed.
function InitConfig() {
    # Find XCode SDK Version.
    XCodeSDKsPath=($(xcodebuild -version -sdk 2>/dev/null | grep -E "^Path:" | grep -v MacOSX | awk -F": " '{print $2}' | tr '\n' ' '))
    for p in ${XCodeSDKsPath[@]}; do echo $p | grep -o -E "[0-9]\.[0-9]"; done | sort | tail -n 1
}

function CompileVersion() {
    value=$(date | md5)
    echo ${value:0:7}
}

XCodeSDKs=($(xcodebuild -version -sdk 2>/dev/null | grep -E "^Path:" | grep -v MacOSX | awk '{print $2}' | tr '\n' ' '))
XCodePlatforms=($( xcodebuild -version -sdk | grep -E "^PlatformPath" | grep -v MacOSX | awk '{print $2}' | uniq | tr '\n' ' '))
ROOT_PATH=$(pwd)

XCodeVersion=$(xcodebuild -version | grep Xcode | cut -d ' ' -f 2)

# Compare two version
# if V1 < V2, return -1
# if V1 > V2, return 1
# if V1 = V2, return 0
function VersionCompare() {
    v1=($(echo $1 | tr '.' ' '))
    v2=($(echo $2 | tr '.' ' '))
    lv1=${#v1[@]}
    lv2=${#v2[@]}
	cmprLength=0
    if [ $lv1 -gt $lv2 ]; then
        cmprLength=$lv2
        longerVersion="1"
    elif [ $lv1 -lt $lv2 ]; then
        cmprLength=$lv1
        longerVersion="-1"
    else
		cmprLength=$lv1
        longerVersion="0"
    fi
    for ((i=0;i<$cmprLength;++i)); do
        p1=${v1[$i]}
        p2=${v2[$i]}
        if [ $p1 -gt $p2 ]; then
            echo "1"
            return
        elif [ $p1 -lt $p2 ]; then
            echo "-1"
            return
        else
            continue
        fi
    done
    echo $longerVersion
}

# Say the message and echo to the screen.
function msg() {
    if [ ! "$1" ]; then
        return 1
    fi
    say $1 &
    echo $1
}

function FindFirstTarget() {
    __target=$(xcodebuild -list | grep "Targets" -A 1 | tail -n 1 | tr -d ' ')
    if [ $? -ne 0 ]; then
        echo "Not in an Xcode project folder."
        exit 1
    fi
    echo ${__target}
}

vResult=$(VersionCompare $XCodeVersion "5.0")
# Define the available Archs
if [ "$vResult" == "-1" ]; then
    Archs=("i386" "armv7" "armv7s")
else
    Archs=("i386" "x86_64" "armv7" "armv7s" "arm64")
fi
countOfSupportedArchs=${#Archs[@]}

Version=$(InitConfig)
XCodeSDKNames=($(xcodebuild -showsdks | grep iOS | grep "sdk" | grep $Version | awk -F"-sdk " '{print $2}'))

# Function: SearchSDK for specified platform
function SearchSDK() {
    platform=$1
    for sdk in ${XCodeSDKs[@]}; do
        echo $sdk | grep $Version | grep $platform
    done | sort | uniq | head -n 1
}

# Function: Search SDK Name for specified platform
function SearchSDKName() {
    platform=$1
    for sdk in ${XCodeSDKNames[@]}; do
        echo $sdk | grep $platform 
    done | sort | uniq | head -n 1
}

# Function: Search specified platform path
function SearchPlatform() {
    platform=$1
    for pf in ${XCodePlatforms[@]}; do
        echo $pf | grep $platform
    done | sort | uniq | head -n 1
}

# Capitalize the string
function capitalize() {
    __string=$1
    if [ ! $2 ]; then 
        __cCount=1
    else
        __cCount=$2
    fi

    __cString=$(echo ${__string:0:${__cCount}} | tr a-z A-Z)
    echo ${__cString}${__string:${__cCount}}
}

# Install Frameworks to Xcode Path
function InstallFrameworkToXcode() {
    ProjectName=$1
    FrameworkVersion=$2
    if [ ! -d /usr/local/Frameworks/${ProjectName}.${FrameworkVersion}.framework ]; then
        return 1
    fi
    for sdkPath in ${XCodeSDKs[@]}; do
        sdkFrameworkPath=${sdkPath}/System/Library/Frameworks/${ProjectName}.framework
        sudo rm -rf ${sdkFrameworkPath}
        sudo mkdir -p ${sdkFrameworkPath}
        sudo ln -s /usr/local/Frameworks/${ProjectName}.${FrameworkVersion}.framework/${ProjectName} ${sdkFrameworkPath}/${ProjectName}
        sudo ln -s /usr/local/Frameworks/${ProjectName}.${FrameworkVersion}.framework/Headers ${sdkFrameworkPath}/Headers
    done
}

# Install Frameworks
function InstallFrameworkToDefault() {
    ProjectName=$1
    FrameworkVersion=$2
    mkdir -p /usr/local/Frameworks
    rm -rf /usr/local/Frameworks/${ProjectName}.${FrameworkVersion}.framework
    mv -f ./${ProjectName}.framework /usr/local/Frameworks/${ProjectName}.${FrameworkVersion}.framework

    echo "The framework has been installed in to /usr/local/Frameworks/${ProjectName}.${FrameworkVersion}.framework"
    echo "The following step is going to install the framework to the Xcode SDK's framework path."
    echo "Need sudo password to continue..."
    InstallFrameworkToXcode $ProjectName $FrameworkVersion
}

ARM7SDK=$(SearchSDK iPhoneOS)
ARM7Platform=$(SearchPlatform iPhoneOS)
ARM7CC=${XPath}/usr/bin/
ARM7SDKName=$(SearchSDKName iphoneos)

ARM7sSDK=$(SearchSDK iPhoneOS)
ARM7sPlatform=$(SearchPlatform iPhoneOS)
ARM7sCC=${XPath}/usr/bin/
ARM7sSDKName=$(SearchSDKName iphoneos)

ARM64SDK=$(SearchSDK iPhoneOS)
ARM64Platform=$(SearchPlatform iPhoneOS)
ARM64CC=${XPath}/usr/bin/
ARM64SDKName=$(SearchSDKName iphoneos)

i386SDK=$(SearchSDK iPhoneSimulator)
i386Platform=$(SearchPlatform iPhoneSimulator)
i386CC=${i386Platform}/Developer/usr/bin/
i386SDKName=$(SearchSDKName iphonesimulator)

x86_64SDK=$(SearchSDK iPhoneSimulator)
x86_64Platform=$(SearchPlatform iPhoneSimulator)
x86_64CC=${x86_64Platform}/Developer/usr/bin/
x86_64SDKName=$(SearchSDKName iphonesimulator)

# Generate the settings array
SDKs=(${i386SDK} ${x86_64SDK} ${ARM7SDK} ${ARM7SDK} ${ARM64SDK})
Platforms=(${i386Platform} ${x86_64Platform} ${ARM7Platform} ${ARM7sPlatform} ${ARM64Platform})
CCs=(${i386CC} ${x86_64CC} ${ARM7CC} ${ARM7sCC} ${ARM64CC})
SDKNames=(${i386SDKName} ${x86_64SDKName} ${ARM7SDKName} ${ARM7sSDKName} ${ARM64SDKName})
IPHONE_VER_MINs=("-miphoneos-version-min=5.0" "-miphoneos-version-min=5.1.1" "-miphoneos-version-min=5.0" "-miphoneos-version-min=5.0" "-miphoneos-version-min=7.0")
XIOS_VER_MINs=("5.0" "5.1.1" "5.0" "5.0" "7.0")
