#! /bin/sh

source ../config.hd

function usage() {
	echo "usage: xcode.build TARGET=<projectname> ACTION=<actions>"
}

for arg in $@; do
	key=$(echo $arg | cut -d = -f 1)
	if [ $? -ne 0 ]; then
		echo "Wrong Command."
		usage
		exit 1
	fi
	value=$(echo $arg | cut -d = -f 2)
	case $key in
	"TARGET")
		ProjectName=$value
		;;
	"ACTION")
		ExecutePart=$value
		;;
	"CONFIG")
		Configuration=$value
		;;
	"VERSION")
		FVersion=$value
		;;
	*)
		echo "Unknow command $key."
		usage
		exit 1
		;;
	esac
done

if [ "${ProjectName}" == "" ]; then
	ProjectName=$(FindFirstTarget)
fi

if [ "${ExecutePart}" == "" ]; then
	ExecutePart="ALL"
fi

if [ "${Configuration}" == "" ]; then
	Configuration="Release"
fi

if [ "${FVersion}" == "" ]; then
	FVersion=$(CompileVersion)
fi

if [ "${ExecutePart}" != "ALL" ]; then
	if [ "${ExecutePart}" != "COMPILE" ]; then
		echo "The execute part is not validate, only can be ALL/COMPILE"
		exit 2
	fi
fi

PCH_DIR=/tmp/SharedPrecompiledHeaders

function cleanXcodeModuleCache() {
	mcf=$(sudo find /var/folders -name com.apple.DeveloperTools)
	for f in $mcf; do 
		sudo rm -rfv $f
	done
}

cleanXcodeModuleCache
for ((i=0;i<$countOfSupportedArchs;++i)); do
	rm -rf ${PCH_DIR}
	arch=${Archs[$i]}
	xcodebuild 	-target ${ProjectName}									\
				-configuration ${Configuration}							\
				-sdk ${SDKNames[$i]}									\
				TARGET_NAME=${ProjectName}-${arch}						\
				CONFIGURATION_BUILD_DIR=./build/${ProjectName}-lib 		\
				CACHE_ROOT=/tmp/										\
				SHARED_PRECOMPS_DIR=${PCH_DIR}/${ProjectName}			\
				ARCHS=${arch}											\
				VALID_ARCHS=${arch}										\
				IPHONEOS_DEPLOYMENT_TARGET=${XIOS_VER_MINs[$i]}		
	if [ $? -ne 0 ]; then
		echo "Failed to build ${ProjectName}"
		exit 1
	fi
done

cd ./build/${ProjectName}-lib

lipoArg=$( for arch in ${Archs[@]}; do echo "-arch $arch lib${ProjectName}-${arch}.a"; done | tr '\n' ' ')
xcrun -sdk iphoneos lipo -output lib${ProjectName}.a -create $lipoArg

if [ ! -d ./usr ]; then
	echo "Must set the copy headers in the Project setting and put the copy header files in the public section."
	exit 1
fi

mv -f ./usr/local/include ./include
includeFiles=$(ls include)
for headfile in $includeFiles; do
	filePath=include/${headfile}
	#echo "process file: $filePath"
	includes=$(grep "#import \"" ${filePath} | awk -F"#import \"" '{print $2}' | awk -F "\"" '{print $1}')
	#echo "Find import head: $includes" >> /tmp/aggtarget.log
	for includePiece in $includes; do
		filename=$(echo $includePiece | awk -F"." '{print $1}')
		extension=$(echo $includePiece | awk -F"." '{print $2}')
		#echo "file: $filename, extension: $extension"
		sed -i "" "s/\#import\ \"${filename}\.${extension}\"/\#import\ \<${ProjectName}\/${filename}\.${extension}\>/g" $filePath
	done
done

cd ../../
rm -rf ${ProjectName}.framework
mkdir ${ProjectName}.framework
mv ./build/${ProjectName}-lib/lib${ProjectName}.a ./${ProjectName}.framework/${ProjectName}
mv -f ./build/${ProjectName}-lib/include ./${ProjectName}.framework/Headers

if [ "${ExecutePart}" == "ALL" ]; then
	InstallFrameworkToDefault ${ProjectName} "${Configuration}.${FVersion}"
fi

rm -rf ./build

echo "Done"
